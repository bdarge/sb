apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "sb.fullname" . }}-api
  labels:
    {{- include "sb.labels" . | nindent 4 }}
    app: {{ template "sb.name" . }}-api
spec:
{{- if not .Values.api.autoscaling.enabled }}
  replicas: {{ .Values.api.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      app: {{ template "sb.name" . }}-api
  template:
    metadata:
      labels:
        {{- include "sb.labels" . | nindent 8 }}
        app: {{ template "sb.name" . }}-api
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "sb.serviceAccountName" . }}
      dnsPolicy: {{ .Values.dnsPolicy }}
      initContainers:
        - name: wait-for-mysql
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', 'until nc -vz ${SVC_NAME} 3308; do echo "Waiting for mysql db..."; sleep 3; done;']
          env:
            - name: SVC_NAME
              value: {{ include "sb.fullname" . }}-db-svc
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.api.securityContext | nindent 12 }}
          image: "{{ .Values.api.image.repository }}:{{ .Values.api.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.api.image.pullPolicy }}
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "sb-db"
                  key: password
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "sb-db"
                  key: username
            - name: ENV
              value: "prod"
            - name: GIN_MODE
              value: release
            - name: DSN
              value: "$(DB_USERNAME):$(DB_PASSWORD)@tcp({{ include "sb.fullname" . }}-db-svc:{{ .Values.db.service.port }})/{{ .Values.db.db_name }}?parseTime=true"
          ports:
            - name: http
              containerPort: {{ .Values.api.service.port }}
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: "/app/envs"
          livenessProbe:
            grpc:
              port: {{ .Values.api.service.port }}
            initialDelaySeconds: 15
            periodSeconds: 10
          readinessProbe:
            grpc:
              port: {{ .Values.api.service.port }}
            initialDelaySeconds: 15
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: config
          configMap:
            name: {{ include "sb.fullname" . }}-api-config
            items:
            - key: "prod.env"
              path: "prod.env"
      dnsConfig:
        options:
          - name: ndots
            value: {{ .Values.dnsConfig.ndots | quote }}
